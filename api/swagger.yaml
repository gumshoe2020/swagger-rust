---
swagger: "2.0"
info:
  description: "This is a sample server Petstore server.  You can find out more about\
    \ Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net, #swagger](http://swagger.io/irc/).\
    \  For this sample, you can use the api key `special-key` to test the authorization\
    \ filters."
  version: "1.0.5"
  title: "Swagger Petstore"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "petstore.swagger.io"
basePath: "/v2"
tags:
- name: "pet"
  description: "Everything about your Pets"
  externalDocs:
    description: "Find out more"
    url: "http://swagger.io"
- name: "store"
  description: "Access to Petstore orders"
- name: "user"
  description: "Operations about user"
  externalDocs:
    description: "Find out more about our store"
    url: "http://swagger.io"
schemes:
- "https"
- "http"
paths:
  /pet/{petId}/uploadImage:
    post:
      tags:
      - "pet"
      summary: "uploads an image"
      description: ""
      operationId: "uploadFile"
      consumes:
      - "multipart/form-data"
      produces:
      - "application/json"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to update"
        required: true
        type: "integer"
        format: "int64"
        formatString: "{}"
        example: "789"
      - name: "additionalMetadata"
        in: "formData"
        description: "Additional data to pass to server"
        required: false
        type: "string"
        formatString: "{:?}"
        example: "Some(\"additional_metadata_example\".to_string())"
      - name: "file"
        in: "formData"
        description: "file to upload"
        required: false
        type: "file"
        formatString: "{:?}"
        example: "Box::new(future::ok(Some(Box::new(stream::once(Ok(b\"hello\".to_vec())))\
          \ as Box<Stream<Item=_, Error=_> + Send>))) as Box<Future<Item=_, Error=_>\
          \ + Send>"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/ApiResponse"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "UPLOAD_FILE"
          uppercase_data_type: "APIRESPONSE"
          producesJson: true
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      operation_id: "upload_file"
      uppercase_operation_id: "UPLOAD_FILE"
      path: "/pet/:petId/uploadImage"
      PATH_ID: "PET_PETID_UPLOADIMAGE"
      hasPathParams: true
      HttpMethod: "Post"
      hasFile: true
  /pet:
    post:
      tags:
      - "pet"
      summary: "Add a new pet to the store"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
        uppercase_data_type: "PET"
        refName: "Pet"
        formatString: "{:?}"
        example: "???"
        model_key: "User"
        uppercase_operation_id: "ADD_PET"
        consumesXml: true
      responses:
        "405":
          description: "Invalid input"
          x-responseId: "InvalidInput"
          x-uppercaseResponseId: "INVALID_INPUT"
          uppercase_operation_id: "ADD_PET"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      operation_id: "add_pet"
      uppercase_operation_id: "ADD_PET"
      path: "/pet"
      PATH_ID: "PET"
      hasPathParams: false
      HttpMethod: "Post"
      noClientExample: true
    put:
      tags:
      - "pet"
      summary: "Update an existing pet"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Pet"
        uppercase_data_type: "PET"
        refName: "Pet"
        formatString: "{:?}"
        example: "???"
        model_key: "User"
        uppercase_operation_id: "UPDATE_PET"
        consumesXml: true
      responses:
        "400":
          description: "Invalid ID supplied"
          x-responseId: "InvalidIDSupplied"
          x-uppercaseResponseId: "INVALID_ID_SUPPLIED"
          uppercase_operation_id: "UPDATE_PET"
        "404":
          description: "Pet not found"
          x-responseId: "PetNotFound"
          x-uppercaseResponseId: "PET_NOT_FOUND"
          uppercase_operation_id: "UPDATE_PET"
        "405":
          description: "Validation exception"
          x-responseId: "ValidationException"
          x-uppercaseResponseId: "VALIDATION_EXCEPTION"
          uppercase_operation_id: "UPDATE_PET"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      operation_id: "update_pet"
      uppercase_operation_id: "UPDATE_PET"
      path: "/pet"
      PATH_ID: "PET"
      hasPathParams: false
      HttpMethod: "Put"
      noClientExample: true
  /pet/findByStatus:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by status"
      description: "Multiple status values can be provided with comma separated strings"
      operationId: "findPetsByStatus"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "status"
        in: "query"
        description: "Status values that need to be considered for filter"
        required: true
        type: "array"
        items:
          type: "string"
          default: "available"
          enum:
          - "available"
          - "pending"
          - "sold"
        collectionFormat: "multi"
        formatString: "{:?}"
        example: "&Vec::new()"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "FIND_PETS_BY_STATUS"
          uppercase_data_type: "VEC<PET>"
          producesXml: true
        "400":
          description: "Invalid status value"
          x-responseId: "InvalidStatusValue"
          x-uppercaseResponseId: "INVALID_STATUS_VALUE"
          uppercase_operation_id: "FIND_PETS_BY_STATUS"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      operation_id: "find_pets_by_status"
      uppercase_operation_id: "FIND_PETS_BY_STATUS"
      path: "/pet/findByStatus"
      PATH_ID: "PET_FINDBYSTATUS"
      hasPathParams: false
      HttpMethod: "Get"
  /pet/findByTags:
    get:
      tags:
      - "pet"
      summary: "Finds Pets by tags"
      description: "Multiple tags can be provided with comma separated strings. Use\
        \ tag1, tag2, tag3 for testing."
      operationId: "findPetsByTags"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "tags"
        in: "query"
        description: "Tags to filter by"
        required: true
        type: "array"
        items:
          type: "string"
        collectionFormat: "multi"
        formatString: "{:?}"
        example: "&Vec::new()"
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Pet"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "FIND_PETS_BY_TAGS"
          uppercase_data_type: "VEC<PET>"
          producesXml: true
        "400":
          description: "Invalid tag value"
          x-responseId: "InvalidTagValue"
          x-uppercaseResponseId: "INVALID_TAG_VALUE"
          uppercase_operation_id: "FIND_PETS_BY_TAGS"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      deprecated: true
      operation_id: "find_pets_by_tags"
      uppercase_operation_id: "FIND_PETS_BY_TAGS"
      path: "/pet/findByTags"
      PATH_ID: "PET_FINDBYTAGS"
      hasPathParams: false
      HttpMethod: "Get"
  /pet/{petId}:
    get:
      tags:
      - "pet"
      summary: "Find pet by ID"
      description: "Returns a single pet"
      operationId: "getPetById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet to return"
        required: true
        type: "integer"
        format: "int64"
        formatString: "{}"
        example: "789"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Pet"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "GET_PET_BY_ID"
          uppercase_data_type: "PET"
          producesXml: true
        "400":
          description: "Invalid ID supplied"
          x-responseId: "InvalidIDSupplied"
          x-uppercaseResponseId: "INVALID_ID_SUPPLIED"
          uppercase_operation_id: "GET_PET_BY_ID"
        "404":
          description: "Pet not found"
          x-responseId: "PetNotFound"
          x-uppercaseResponseId: "PET_NOT_FOUND"
          uppercase_operation_id: "GET_PET_BY_ID"
      security:
      - api_key: []
      operation_id: "get_pet_by_id"
      uppercase_operation_id: "GET_PET_BY_ID"
      path: "/pet/:petId"
      PATH_ID: "PET_PETID"
      hasPathParams: true
      HttpMethod: "Get"
    post:
      tags:
      - "pet"
      summary: "Updates a pet in the store with form data"
      description: ""
      operationId: "updatePetWithForm"
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "petId"
        in: "path"
        description: "ID of pet that needs to be updated"
        required: true
        type: "integer"
        format: "int64"
        formatString: "{}"
        example: "789"
      - name: "name"
        in: "formData"
        description: "Updated name of the pet"
        required: false
        type: "string"
        formatString: "{:?}"
        example: "Some(\"name_example\".to_string())"
      - name: "status"
        in: "formData"
        description: "Updated status of the pet"
        required: false
        type: "string"
        formatString: "{:?}"
        example: "Some(\"status_example\".to_string())"
      responses:
        "405":
          description: "Invalid input"
          x-responseId: "InvalidInput"
          x-uppercaseResponseId: "INVALID_INPUT"
          uppercase_operation_id: "UPDATE_PET_WITH_FORM"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      operation_id: "update_pet_with_form"
      uppercase_operation_id: "UPDATE_PET_WITH_FORM"
      path: "/pet/:petId"
      PATH_ID: "PET_PETID"
      hasPathParams: true
      HttpMethod: "Post"
    delete:
      tags:
      - "pet"
      summary: "Deletes a pet"
      description: ""
      operationId: "deletePet"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "api_key"
        in: "header"
        required: false
        type: "string"
        formatString: "{:?}"
        example: "Some(\"api_key_example\".to_string())"
      - name: "petId"
        in: "path"
        description: "Pet id to delete"
        required: true
        type: "integer"
        format: "int64"
        formatString: "{}"
        example: "789"
      responses:
        "400":
          description: "Invalid ID supplied"
          x-responseId: "InvalidIDSupplied"
          x-uppercaseResponseId: "INVALID_ID_SUPPLIED"
          uppercase_operation_id: "DELETE_PET"
        "404":
          description: "Pet not found"
          x-responseId: "PetNotFound"
          x-uppercaseResponseId: "PET_NOT_FOUND"
          uppercase_operation_id: "DELETE_PET"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
      operation_id: "delete_pet"
      uppercase_operation_id: "DELETE_PET"
      path: "/pet/:petId"
      PATH_ID: "PET_PETID"
      hasPathParams: true
      HttpMethod: "Delete"
  /store/order:
    post:
      tags:
      - "store"
      summary: "Place an order for a pet"
      description: ""
      operationId: "placeOrder"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "order placed for purchasing the pet"
        required: true
        schema:
          $ref: "#/definitions/Order"
        uppercase_data_type: "ORDER"
        refName: "Order"
        formatString: "{:?}"
        example: "???"
        model_key: "User"
        uppercase_operation_id: "PLACE_ORDER"
        consumesJson: true
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "PLACE_ORDER"
          uppercase_data_type: "ORDER"
          producesXml: true
        "400":
          description: "Invalid Order"
          x-responseId: "InvalidOrder"
          x-uppercaseResponseId: "INVALID_ORDER"
          uppercase_operation_id: "PLACE_ORDER"
      operation_id: "place_order"
      uppercase_operation_id: "PLACE_ORDER"
      path: "/store/order"
      PATH_ID: "STORE_ORDER"
      hasPathParams: false
      HttpMethod: "Post"
      noClientExample: true
  /store/order/{orderId}:
    get:
      tags:
      - "store"
      summary: "Find purchase order by ID"
      description: "For valid response try integer IDs with value >= 1 and <= 10.\
        \ Other values will generated exceptions"
      operationId: "getOrderById"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of pet that needs to be fetched"
        required: true
        type: "integer"
        maximum: 10
        minimum: 1
        format: "int64"
        formatString: "{}"
        example: "789"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/Order"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "GET_ORDER_BY_ID"
          uppercase_data_type: "ORDER"
          producesXml: true
        "400":
          description: "Invalid ID supplied"
          x-responseId: "InvalidIDSupplied"
          x-uppercaseResponseId: "INVALID_ID_SUPPLIED"
          uppercase_operation_id: "GET_ORDER_BY_ID"
        "404":
          description: "Order not found"
          x-responseId: "OrderNotFound"
          x-uppercaseResponseId: "ORDER_NOT_FOUND"
          uppercase_operation_id: "GET_ORDER_BY_ID"
      operation_id: "get_order_by_id"
      uppercase_operation_id: "GET_ORDER_BY_ID"
      path: "/store/order/:orderId"
      PATH_ID: "STORE_ORDER_ORDERID"
      hasPathParams: true
      HttpMethod: "Get"
    delete:
      tags:
      - "store"
      summary: "Delete purchase order by ID"
      description: "For valid response try integer IDs with positive integer value.\
        \ Negative or non-integer values will generate API errors"
      operationId: "deleteOrder"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "orderId"
        in: "path"
        description: "ID of the order that needs to be deleted"
        required: true
        type: "integer"
        minimum: 1
        format: "int64"
        formatString: "{}"
        example: "789"
      responses:
        "400":
          description: "Invalid ID supplied"
          x-responseId: "InvalidIDSupplied"
          x-uppercaseResponseId: "INVALID_ID_SUPPLIED"
          uppercase_operation_id: "DELETE_ORDER"
        "404":
          description: "Order not found"
          x-responseId: "OrderNotFound"
          x-uppercaseResponseId: "ORDER_NOT_FOUND"
          uppercase_operation_id: "DELETE_ORDER"
      operation_id: "delete_order"
      uppercase_operation_id: "DELETE_ORDER"
      path: "/store/order/:orderId"
      PATH_ID: "STORE_ORDER_ORDERID"
      hasPathParams: true
      HttpMethod: "Delete"
  /store/inventory:
    get:
      tags:
      - "store"
      summary: "Returns pet inventories by status"
      description: "Returns a map of status codes to quantities"
      operationId: "getInventory"
      produces:
      - "application/json"
      parameters: []
      responses:
        "200":
          description: "successful operation"
          schema:
            type: "object"
            additionalProperties:
              type: "integer"
              format: "int32"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "GET_INVENTORY"
          uppercase_data_type: "HASHMAP<STRING, I32>"
          producesJson: true
      security:
      - api_key: []
      operation_id: "get_inventory"
      uppercase_operation_id: "GET_INVENTORY"
      path: "/store/inventory"
      PATH_ID: "STORE_INVENTORY"
      hasPathParams: false
      HttpMethod: "Get"
  /user/createWithArray:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithArrayInput"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        formatString: "{:?}"
        example: "&Vec::new()"
        model_key: "User"
        uppercase_operation_id: "CREATE_USERS_WITH_ARRAY_INPUT"
        consumesJson: true
      responses:
        default:
          description: "successful operation"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "CREATE_USERS_WITH_ARRAY_INPUT"
      operation_id: "create_users_with_array_input"
      uppercase_operation_id: "CREATE_USERS_WITH_ARRAY_INPUT"
      path: "/user/createWithArray"
      PATH_ID: "USER_CREATEWITHARRAY"
      hasPathParams: false
      HttpMethod: "Post"
  /user/createWithList:
    post:
      tags:
      - "user"
      summary: "Creates list of users with given input array"
      description: ""
      operationId: "createUsersWithListInput"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "List of user object"
        required: true
        schema:
          type: "array"
          items:
            $ref: "#/definitions/User"
        formatString: "{:?}"
        example: "&Vec::new()"
        model_key: "User"
        uppercase_operation_id: "CREATE_USERS_WITH_LIST_INPUT"
        consumesJson: true
      responses:
        default:
          description: "successful operation"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "CREATE_USERS_WITH_LIST_INPUT"
      operation_id: "create_users_with_list_input"
      uppercase_operation_id: "CREATE_USERS_WITH_LIST_INPUT"
      path: "/user/createWithList"
      PATH_ID: "USER_CREATEWITHLIST"
      hasPathParams: false
      HttpMethod: "Post"
  /user/{username}:
    get:
      tags:
      - "user"
      summary: "Get user by user name"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be fetched. Use user1 for testing. "
        required: true
        type: "string"
        formatString: "\\\"{}\\\""
        example: "\"username_example\".to_string()"
      responses:
        "200":
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "GET_USER_BY_NAME"
          uppercase_data_type: "USER"
          producesXml: true
        "400":
          description: "Invalid username supplied"
          x-responseId: "InvalidUsernameSupplied"
          x-uppercaseResponseId: "INVALID_USERNAME_SUPPLIED"
          uppercase_operation_id: "GET_USER_BY_NAME"
        "404":
          description: "User not found"
          x-responseId: "UserNotFound"
          x-uppercaseResponseId: "USER_NOT_FOUND"
          uppercase_operation_id: "GET_USER_BY_NAME"
      operation_id: "get_user_by_name"
      uppercase_operation_id: "GET_USER_BY_NAME"
      path: "/user/:username"
      PATH_ID: "USER_USERNAME"
      hasPathParams: true
      HttpMethod: "Get"
    put:
      tags:
      - "user"
      summary: "Updated user"
      description: "This can only be done by the logged in user."
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "name that need to be updated"
        required: true
        type: "string"
        formatString: "\\\"{}\\\""
        example: "\"username_example\".to_string()"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        uppercase_data_type: "USER"
        refName: "User"
        formatString: "{:?}"
        example: "???"
        model_key: "User"
        uppercase_operation_id: "UPDATE_USER"
        consumesJson: true
      responses:
        "400":
          description: "Invalid user supplied"
          x-responseId: "InvalidUserSupplied"
          x-uppercaseResponseId: "INVALID_USER_SUPPLIED"
          uppercase_operation_id: "UPDATE_USER"
        "404":
          description: "User not found"
          x-responseId: "UserNotFound"
          x-uppercaseResponseId: "USER_NOT_FOUND"
          uppercase_operation_id: "UPDATE_USER"
      operation_id: "update_user"
      uppercase_operation_id: "UPDATE_USER"
      path: "/user/:username"
      PATH_ID: "USER_USERNAME"
      hasPathParams: true
      HttpMethod: "Put"
      noClientExample: true
    delete:
      tags:
      - "user"
      summary: "Delete user"
      description: "This can only be done by the logged in user."
      operationId: "deleteUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "path"
        description: "The name that needs to be deleted"
        required: true
        type: "string"
        formatString: "\\\"{}\\\""
        example: "\"username_example\".to_string()"
      responses:
        "400":
          description: "Invalid username supplied"
          x-responseId: "InvalidUsernameSupplied"
          x-uppercaseResponseId: "INVALID_USERNAME_SUPPLIED"
          uppercase_operation_id: "DELETE_USER"
        "404":
          description: "User not found"
          x-responseId: "UserNotFound"
          x-uppercaseResponseId: "USER_NOT_FOUND"
          uppercase_operation_id: "DELETE_USER"
      operation_id: "delete_user"
      uppercase_operation_id: "DELETE_USER"
      path: "/user/:username"
      PATH_ID: "USER_USERNAME"
      hasPathParams: true
      HttpMethod: "Delete"
  /user/login:
    get:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - name: "username"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
        formatString: "\\\"{}\\\""
        example: "\"username_example\".to_string()"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
        formatString: "\\\"{}\\\""
        example: "\"password_example\".to_string()"
      responses:
        "200":
          description: "successful operation"
          headers:
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "date in UTC when token expires"
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "calls per hour allowed by the user"
          schema:
            type: "string"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "LOGIN_USER"
          uppercase_data_type: "STRING"
          producesXml: true
        "400":
          description: "Invalid username/password supplied"
          x-responseId: "InvalidUsername"
          x-uppercaseResponseId: "INVALID_USERNAME"
          uppercase_operation_id: "LOGIN_USER"
      operation_id: "login_user"
      uppercase_operation_id: "LOGIN_USER"
      path: "/user/login"
      PATH_ID: "USER_LOGIN"
      hasPathParams: false
      HttpMethod: "Get"
  /user/logout:
    get:
      tags:
      - "user"
      summary: "Logs out current logged in user session"
      description: ""
      operationId: "logoutUser"
      produces:
      - "application/json"
      - "application/xml"
      parameters: []
      responses:
        default:
          description: "successful operation"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "LOGOUT_USER"
      operation_id: "logout_user"
      uppercase_operation_id: "LOGOUT_USER"
      path: "/user/logout"
      PATH_ID: "USER_LOGOUT"
      hasPathParams: false
      HttpMethod: "Get"
  /user:
    post:
      tags:
      - "user"
      summary: "Create user"
      description: "This can only be done by the logged in user."
      operationId: "createUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      - "application/xml"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: "#/definitions/User"
        uppercase_data_type: "USER"
        refName: "User"
        formatString: "{:?}"
        example: "???"
        model_key: "User"
        uppercase_operation_id: "CREATE_USER"
        consumesJson: true
      responses:
        default:
          description: "successful operation"
          x-responseId: "SuccessfulOperation"
          x-uppercaseResponseId: "SUCCESSFUL_OPERATION"
          uppercase_operation_id: "CREATE_USER"
      operation_id: "create_user"
      uppercase_operation_id: "CREATE_USER"
      path: "/user"
      PATH_ID: "USER"
      hasPathParams: false
      HttpMethod: "Post"
      noClientExample: true
securityDefinitions:
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "https://petstore.swagger.io/oauth/authorize"
    flow: "implicit"
    scopes:
      read:pets: "read your pets"
      write:pets: "modify pets in your account"
definitions:
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
    example:
      code: 0
      type: "type"
      message: "message"
    upperCaseName: "APIRESPONSE"
  Category:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Category"
    example:
      name: "name"
      id: 6
    upperCaseName: "CATEGORY"
  Pet:
    type: "object"
    required:
    - "name"
    - "photoUrls"
    properties:
      id:
        type: "integer"
        format: "int64"
      category:
        $ref: "#/definitions/Category"
      name:
        type: "string"
        example: "doggie"
      photoUrls:
        type: "array"
        xml:
          wrapped: true
        items:
          type: "string"
          xml:
            name: "photoUrl"
      tags:
        type: "array"
        xml:
          wrapped: true
        items:
          xml:
            name: "tag"
          $ref: "#/definitions/Tag"
      status:
        type: "string"
        description: "pet status in the store"
        enum:
        - "available"
        - "pending"
        - "sold"
    xml:
      name: "Pet"
    example:
      photoUrls:
      - "photoUrls"
      - "photoUrls"
      name: "doggie"
      id: 0
      category:
        name: "name"
        id: 6
      tags:
      - name: "name"
        id: 1
      - name: "name"
        id: 1
      status: "available"
    upperCaseName: "PET"
  Tag:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
    xml:
      name: "Tag"
    example:
      name: "name"
      id: 1
    upperCaseName: "TAG"
  Order:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      petId:
        type: "integer"
        format: "int64"
      quantity:
        type: "integer"
        format: "int32"
      shipDate:
        type: "string"
        format: "date-time"
      status:
        type: "string"
        description: "Order Status"
        enum:
        - "placed"
        - "approved"
        - "delivered"
      complete:
        type: "boolean"
    xml:
      name: "Order"
    example:
      petId: 6
      quantity: 1
      id: 0
      shipDate: "2000-01-23T04:56:07.000+00:00"
      complete: true
      status: "placed"
    upperCaseName: "ORDER"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      username:
        type: "string"
      firstName:
        type: "string"
      lastName:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
      phone:
        type: "string"
      userStatus:
        type: "integer"
        format: "int32"
        description: "User Status"
    xml:
      name: "User"
    example:
      firstName: "firstName"
      lastName: "lastName"
      password: "password"
      userStatus: 6
      phone: "phone"
      id: 0
      email: "email"
      username: "username"
    upperCaseName: "USER"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
